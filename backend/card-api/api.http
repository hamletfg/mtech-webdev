### Get JWT Token
# @name getToken
POST http://localhost:3000/getToken
Content-Type: application/json

{
  "username": "alice",
  "password": "wonderland"
}

### Store the token for subsequent requests
@jwt_token = {{getToken.response.body.token}}

### Get all cards (to find an ID and see the current state)
GET http://localhost:3000/cards
Authorization: Bearer {{jwt_token}}

### Update an Existing Card (Successful Case)
PUT http://localhost:3000/cards/2
Authorization: Bearer {{jwt_token}}
Content-Type: application/json


{
  "name": "Super Awesome Updated Card Name",
  "cost": 10,
  "description": "This card is now even better!"
}

### Test PUT - Card Not Found (404)
PUT http://localhost:3000/cards/9999
Authorization: Bearer {{jwt_token}}
Content-Type: application/application/json

{
  "name": "This Card Doesn't Exist",
  "cost": 5
}

### Test PUT - Unauthorized (No Token)
PUT http://localhost:3000/cards/1
Content-Type: application/json

{
  "name": "Unauthorized Update Attempt",
  "cost": 5
}

### Test DELETE - Success
DELETE http://localhost:3000/cards/1
Authorization: Bearer {{jwt_token}}

### Test DELETE - Card Not Found (404)
DELETE http://localhost:3000/cards/9999
Authorization: Bearer {{jwt_token}}

### Test DELETE - Unauthorized (No Token)
DELETE http://localhost:3000/cards/2

### Test Multiple Filters (Set = "Base Set", Type = "Creature", Rarity = "Common"
GET http://localhost:3000/cards?set=Base%20Set&type=Creature&rarity=Common

### Test Single Filter
GET http://localhost:3000/cards?type=Spell

### Test Different Filter Combination
GET http://localhost:3000/cards?rarity=Rare&cost=2

### Test Filter with No Results
GET http://localhost:3000/cards?set=NonExistentSet

### Test Case-Sensitive Filtering
GET http://localhost:3000/cards?type=CREATURE

### Get All Sets
GET http://localhost:3000/sets
